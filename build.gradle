plugins {
    id 'io.gitlab.arturbosch.detekt'
    id 'com.android.application' apply false
    id 'com.android.library' apply false
    id 'org.jetbrains.kotlin.android' apply false
    id 'dagger.hilt.android.plugin' apply false
    id "com.automattic.android.publish-to-s3" apply false
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url "https://www.jitpack.io" }
        maven { url "https://a8c-libs.s3.amazonaws.com/android" }
    }
}

subprojects {
    repositories {
        flatDir {
            dirs '../../aars'
        }
    }
}

ext {
    minSdkVersion = 24
    compileSdkVersion = 31
    targetSdkVersion = 31
    buildToolsVersion = "30.0.3"

    daggerVersion = gradle.ext.daggerVersion
    glideVersion = '4.12.0'
    hiltVersion = '1.0.0'
    lifecycleVersion = '2.4.0'
    datastoreVersion = '1.0.0'
    hiltVersion = '1.0.0'
    swiperefreshlayoutVersion = '1.1.0'
    constraintlayoutVersion = '2.1.1'
    appcompatVersion = '1.4.1'
    coreVersion = '1.7.0'
    coroutinesVersion = '1.5.2'
    materialVersion = '1.5.0'
    photoViewVersion = '2.3.0'
    navigationFragmentVersion = '2.3.5'
    wordpressUtilsVersion = "2.4.0"
    retrofitVersion = "2.9.0"
    fluxCVersion = 'develop-fa819801570505a0e9b4f7f226bb704b88ccc1d2'
    mediaPickerDomainDependency = project.hasProperty("mediaPickerDomainVersion") ? "org.wordpress.mediapicker:domain:${project.getProperty("mediaPickerDomainVersion")}" : project(":mediapicker:domain")
}

def detektAll = tasks.register("detektAll", io.gitlab.arturbosch.detekt.Detekt) {
    description = "Custom DETEKT build for all modules"
    parallel = true
    ignoreFailures = false
    buildUponDefaultConfig = true
    setSource(file(projectDir))
    baseline.set(file("$rootDir/config/detekt/baseline.xml"))
    config.setFrom(files("$rootDir/config/detekt/detekt.yml"))
    include("**/*.kt")
    exclude("**/resources/**", "**/build/**")

    reports {
        html.enabled = true
        xml.enabled = true
        txt.enabled = false
    }
}

def detektAutoCorrectPrompt = tasks.register("detektAutoCorrectPrompt") {
    doLast {
        def detektTask = detektAll.get()
        if (detektTask.state.failure != null && !detektTask.autoCorrect) {
            println ".-----------------------------------------------------------------------------------------------------------------------------------.\n" +
                    "| ðŸ›   Did you know: you can ask Detekt to automatically resolve some of the issues by running `./gradlew detektAll --auto-correct` |\n" +
                    "'-----------------------------------------------------------------------------------------------------------------------------------'"
        }
    }
}

detektAll.configure{
    finalizedBy detektAutoCorrectPrompt
}

dependencies {
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$gradle.ext.detektVersion"
}
