<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ComplexMethod:DeviceMediaLoader.kt$DeviceMediaLoader$fun loadMedia( mediaType: MediaType, filter: String?, pageSize: Int, limitDate: Long? = null ): DeviceMediaList</ID>
    <ID>ComplexMethod:MediaPickerFragment.kt$MediaPickerFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>ComplexMethod:MediaPickerViewModel.kt$MediaPickerViewModel$private fun buildUiModel( domainModel: DomainModel?, selectedIds: List&lt;Identifier&gt;?, softAskRequest: SoftAskRequest?, isSearching: Boolean? ): PhotoListUiModel</ID>
    <ID>LongMethod:MediaPickerFragment.kt$MediaPickerFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:MediaPickerViewModel.kt$MediaPickerViewModel$private fun buildUiModel( domainModel: DomainModel?, selectedIds: List&lt;Identifier&gt;?, softAskRequest: SoftAskRequest?, isSearching: Boolean? ): PhotoListUiModel</ID>
    <ID>LongParameterList:LiveDataUtils.kt$( sourceA: LiveData&lt;S&gt;, sourceB: LiveData&lt;T&gt;, sourceC: LiveData&lt;U&gt;, sourceD: LiveData&lt;V&gt;, sourceE: LiveData&lt;W&gt;, distinct: Boolean = false, merger: (S?, T?, U?, V?, W?) -&gt; X? )</ID>
    <ID>LongParameterList:MediaLibrarySource.kt$MediaLibrarySource$( private val mediaStore: MediaStore, private val dispatcher: Dispatcher, private val bgDispatcher: CoroutineDispatcher, private val dateTimeUtilsWrapper: DateTimeUtilsWrapper, private val networkUtilsWrapper: NetworkUtilsWrapper, private val siteModel: SiteModel, private val mediaTypes: Set&lt;MediaType&gt; )</ID>
    <ID>LongParameterList:MediaThumbnailViewUtils.kt$MediaThumbnailViewUtils$( container: View, imgThumbnail: ImageView, fileName: String, isSelected: Boolean, longClickAction: LongClickAction, toggleAction: ToggleAction, animateSelection: Boolean )</ID>
    <ID>NestedBlockDepth:MediaPickerUtils.kt$MediaPickerUtils$private fun getMediaStoreFilePath(uri: Uri): String?</ID>
    <ID>NestedBlockDepth:MediaPickerViewModel.kt$MediaPickerViewModel$private fun buildSoftAskView(softAskRequest: SoftAskRequest?): SoftAskViewUiModel</ID>
    <ID>ReturnCount:MediaPickerAdapterDiffCallback.kt$MediaPickerAdapterDiffCallback$override fun getChangePayload(oldItemPosition: Int, newItemPosition: Int): Any?</ID>
    <ID>ReturnCount:MediaPickerPermissionUtils.kt$MediaPickerPermissionUtils$/* * returns true if we know the app has asked for the passed permission */ private suspend fun isPermissionAsked(context: Context, permission: String): Boolean</ID>
    <ID>ReturnCount:MediaPickerUtils.kt$MediaPickerUtils$ fun createCaptureImageIntent(tempFilePath: String): Intent?</ID>
    <ID>TooGenericExceptionCaught:MediaPickerUtils.kt$MediaPickerUtils$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MediaPickerUtils.kt$MediaPickerUtils$e: RuntimeException</ID>
    <ID>TooGenericExceptionThrown:ActionableEmptyView.kt$ActionableEmptyView$throw RuntimeException("$context: ActionableEmptyView must have a title (aevTitle)")</ID>
  </CurrentIssues>
</SmellBaseline>
